#!/usr/bin/env python3
"""
Observability usage example for the LangChain Vector Database.

This example demonstrates:
- Observability configuration
- Structured logging
- Metrics collection
- Distributed tracing
- Performance monitoring
- Health checks
"""

import os
import time
from pathlib import Path
from langchain_vector_db.manager import VectorDatabaseManager
from langchain_vector_db.models.config import VectorDBConfig, ObservabilityConfig
from langchain_vector_db.models.document import Document


def main():
    """Demonstrate observability features."""
    
    # Configure observability settings
    observability_config = ObservabilityConfig(
        log_level="DEBUG",
        log_format="json",
        metrics_enabled=True,
        tracing_enabled=True,
        performance_monitoring_enabled=True,
        health_checks_enabled=True,
        memory_threshold_mb=512,
        cpu_threshold_percent=80.0,
        slow_operation_threshold_ms=1000.0
    )
    
    # Configure the vector database with observability
    config = VectorDBConfig(
        storage_type="local",
        embedding_provider="openai",
        embedding_model="text-embedding-ada-002",
        local_storage_path="./observable_vector_db_data",
        api_key=os.getenv("OPENAI_API_KEY"),
        observability=observability_config
    )
    
    # Initialize the vector database manager
    manager = VectorDatabaseManager(config)
    
    try:\n        print(\"üìä Initializing Observable Vector Database...\")\n        \n        # Get initial health status\n        print(\"\\nüè• Checking initial system health...\")\n        health_status = manager.observability_manager.get_comprehensive_health_status()\n        print(f\"   Overall health: {health_status['overall_health']}\")\n        print(f\"   Health checks: {len(health_status['checks'])} components checked\")\n        \n        for component, status in health_status['checks'].items():\n            print(f\"     - {component}: {'‚úÖ' if status['healthy'] else '‚ùå'} {status['message']}\")\n        \n        # Create sample documents for testing\n        print(\"\\nüìÑ Creating sample documents...\")\n        documents = [\n            Document(\n                page_content=\"Observability is crucial for monitoring distributed systems.\",\n                metadata={\"category\": \"monitoring\", \"priority\": \"high\"}\n            ),\n            Document(\n                page_content=\"Metrics collection helps track system performance over time.\",\n                metadata={\"category\": \"metrics\", \"priority\": \"medium\"}\n            ),\n            Document(\n                page_content=\"Distributed tracing provides visibility into request flows.\",\n                metadata={\"category\": \"tracing\", \"priority\": \"high\"}\n            ),\n            Document(\n                page_content=\"Structured logging enables better log analysis and debugging.\",\n                metadata={\"category\": \"logging\", \"priority\": \"medium\"}\n            ),\n            Document(\n                page_content=\"Health checks ensure system components are functioning properly.\",\n                metadata={\"category\": \"health\", \"priority\": \"high\"}\n            )\n        ]\n        \n        # Add documents with observability tracking\n        print(\"\\nüì• Adding documents with observability tracking...\")\n        start_time = time.time()\n        \n        doc_ids = manager.add_documents(\n            documents,\n            generate_embeddings=True,\n            user_id=\"observability_demo_user\"\n        )\n        \n        add_duration = time.time() - start_time\n        print(f\"   Added {len(doc_ids)} documents in {add_duration:.3f} seconds\")\n        print(f\"   Document IDs: {doc_ids}\")\n        \n        # Perform searches with observability tracking\n        print(\"\\nüîç Performing searches with observability tracking...\")\n        \n        search_queries = [\n            \"system monitoring and observability\",\n            \"performance metrics collection\",\n            \"distributed tracing visibility\",\n            \"structured logging analysis\",\n            \"health check monitoring\"\n        ]\n        \n        for i, query in enumerate(search_queries, 1):\n            print(f\"\\n   Search {i}: '{query}'\")\n            search_start = time.time()\n            \n            results = manager.similarity_search(\n                query,\n                k=2,\n                user_id=\"observability_demo_user\"\n            )\n            \n            search_duration = time.time() - search_start\n            print(f\"     Found {len(results)} results in {search_duration:.3f} seconds\")\n            \n            for j, doc in enumerate(results, 1):\n                print(f\"       {j}. {doc.page_content[:50]}... (Category: {doc.metadata.get('category')})\")\n        \n        # Perform searches with scores\n        print(\"\\nüìä Performing scored searches...\")\n        scored_results = manager.similarity_search_with_score(\n            \"observability and monitoring\",\n            k=3,\n            user_id=\"observability_demo_user\"\n        )\n        \n        print(f\"   Scored search returned {len(scored_results)} results:\")\n        for i, (doc, score) in enumerate(scored_results, 1):\n            print(f\"     {i}. Score: {score:.4f} - {doc.page_content[:40]}...\")\n        \n        # Test document operations with observability\n        print(\"\\n‚úèÔ∏è  Testing document operations...\")\n        \n        # Update document\n        update_success = manager.update_document(\n            doc_ids[0],\n            new_content=\"Updated: Observability and monitoring are essential for modern distributed systems.\",\n            new_metadata={\"category\": \"monitoring\", \"priority\": \"high\", \"updated\": True},\n            user_id=\"observability_demo_user\"\n        )\n        print(f\"   Document update successful: {update_success}\")\n        \n        # Retrieve document\n        retrieved_doc = manager.get_document(\n            doc_ids[0],\n            user_id=\"observability_demo_user\"\n        )\n        print(f\"   Retrieved document: {retrieved_doc.page_content[:50]}...\")\n        \n        # Wait a moment to accumulate metrics\n        print(\"\\n‚è≥ Waiting for metrics to accumulate...\")\n        time.sleep(2)\n        \n        # Check system metrics\n        print(\"\\nüìà Checking system metrics...\")\n        system_metrics = manager.observability_manager.get_system_metrics()\n        \n        print(f\"   Documents indexed: {system_metrics.documents_indexed}\")\n        print(f\"   Searches performed: {system_metrics.searches_performed}\")\n        print(f\"   Embeddings generated: {system_metrics.embeddings_generated}\")\n        print(f\"   Request count: {system_metrics.request_count}\")\n        print(f\"   Error count: {system_metrics.error_count}\")\n        print(f\"   Average response time: {system_metrics.avg_response_time_ms:.2f}ms\")\n        \n        # Check performance statistics\n        print(\"\\n‚ö° Checking performance statistics...\")\n        perf_stats = manager.observability_manager.get_performance_statistics()\n        \n        print(\"   Performance statistics:\")\n        for operation, stats in perf_stats.items():\n            if isinstance(stats, dict) and 'count' in stats:\n                print(f\"     - {operation}: {stats['count']} calls, avg {stats.get('mean', 0):.2f}ms\")\n        \n        # Check for slow operations\n        slow_operations = manager.observability_manager.get_slow_operations(threshold_ms=100.0)\n        if slow_operations:\n            print(f\"\\nüêå Found {len(slow_operations)} slow operations:\")\n            for slow_op in slow_operations[:3]:  # Show top 3\n                print(f\"     - {slow_op['operation']}: {slow_op['mean_duration_ms']:.2f}ms avg\")\n        else:\n            print(\"\\n‚úÖ No slow operations detected\")\n        \n        # Check business metrics\n        print(\"\\nüíº Checking business metrics...\")\n        business_metrics = manager.observability_manager.get_business_metrics()\n        \n        if business_metrics:\n            print(\"   Business metrics:\")\n            for metric_name, metric_data in business_metrics.items():\n                if isinstance(metric_data, dict):\n                    value = metric_data.get('value', 'N/A')\n                    description = metric_data.get('description', '')\n                    print(f\"     - {metric_name}: {value} ({description})\")\n        \n        # Check recent logs\n        print(\"\\nüìù Checking recent logs...\")\n        recent_logs = manager.observability_manager.get_recent_logs(10)\n        \n        print(f\"   Found {len(recent_logs)} recent log entries:\")\n        for log_entry in recent_logs[-5:]:  # Show last 5\n            log_dict = log_entry.to_dict()\n            timestamp = log_dict.get('timestamp', 'N/A')\n            level = log_dict.get('level', 'N/A')\n            message = log_dict.get('message', 'N/A')[:60]\n            print(f\"     - [{timestamp}] {level}: {message}...\")\n        \n        # Check distributed traces\n        print(\"\\nüîó Checking distributed traces...\")\n        traces = manager.observability_manager.get_traces(5)\n        \n        if traces:\n            print(f\"   Found {len(traces)} recent traces:\")\n            for trace in traces:\n                trace_dict = trace.to_dict()\n                operation = trace_dict.get('operation_name', 'N/A')\n                duration = trace_dict.get('duration_ms', 0)\n                status = trace_dict.get('status', 'N/A')\n                print(f\"     - {operation}: {duration:.2f}ms ({status})\")\n        else:\n            print(\"   No traces found\")\n        \n        # Check trace statistics\n        trace_stats = manager.observability_manager.get_trace_statistics()\n        if trace_stats:\n            print(\"\\n   Trace statistics:\")\n            print(f\"     - Distributed tracing enabled: {trace_stats.get('distributed_tracing_enabled', False)}\")\n            print(f\"     - Active spans: {trace_stats.get('active_spans', 0)}\")\n            print(f\"     - Total traces: {trace_stats.get('total_traces', 0)}\")\n        \n        # Perform health checks\n        print(\"\\nüè• Performing comprehensive health checks...\")\n        \n        # System health check\n        system_health = manager.health_check()\n        print(f\"   System health check: {'‚úÖ Healthy' if system_health else '‚ùå Unhealthy'}\")\n        \n        # Component health checks\n        health_summary = manager.observability_manager.get_health_summary()\n        print(f\"   Health summary: {health_summary['healthy_checks']}/{health_summary['total_checks']} checks passed\")\n        print(f\"   Overall health percentage: {health_summary['health_percentage']:.1f}%\")\n        \n        # Test memory and CPU monitoring\n        print(\"\\nüíª Checking system resource usage...\")\n        \n        # Get current resource usage\n        resource_usage = manager.observability_manager.get_resource_usage()\n        if resource_usage:\n            print(f\"   Memory usage: {resource_usage.get('memory_usage_mb', 'N/A')} MB\")\n            print(f\"   CPU usage: {resource_usage.get('cpu_usage_percent', 'N/A')}%\")\n            print(f\"   Disk usage: {resource_usage.get('disk_usage_mb', 'N/A')} MB\")\n        \n        # Check for resource alerts\n        resource_alerts = manager.observability_manager.get_resource_alerts()\n        if resource_alerts:\n            print(f\"\\n‚ö†Ô∏è  Found {len(resource_alerts)} resource alerts:\")\n            for alert in resource_alerts:\n                print(f\"     - {alert['type']}: {alert['message']}\")\n        else:\n            print(\"\\n‚úÖ No resource alerts\")\n        \n        # Test custom metrics\n        print(\"\\nüìä Recording custom metrics...\")\n        \n        # Record some custom business metrics\n        manager.observability_manager.record_business_metric(\n            \"demo_operations_completed\",\n            len(doc_ids) + len(search_queries),\n            \"Number of operations completed in demo\",\n            \"count\"\n        )\n        \n        manager.observability_manager.record_business_metric(\n            \"demo_search_accuracy\",\n            95.5,\n            \"Search accuracy percentage in demo\",\n            \"percentage\"\n        )\n        \n        print(\"   Custom metrics recorded successfully\")\n        \n        # Final health and performance summary\n        print(\"\\nüìã Final observability summary...\")\n        \n        final_health = manager.observability_manager.get_comprehensive_health_status()\n        final_metrics = manager.observability_manager.get_system_metrics()\n        \n        print(f\"   Final system health: {final_health['overall_health']}\")\n        print(f\"   Total operations tracked: {final_metrics.request_count}\")\n        print(f\"   Average response time: {final_metrics.avg_response_time_ms:.2f}ms\")\n        print(f\"   Error rate: {(final_metrics.error_count / max(final_metrics.request_count, 1)) * 100:.2f}%\")\n        \n        # Persist with observability tracking\n        print(\"\\nüíæ Persisting database with observability tracking...\")\n        persist_start = time.time()\n        persist_success = manager.persist()\n        persist_duration = time.time() - persist_start\n        \n        print(f\"   Persistence completed in {persist_duration:.3f} seconds: {persist_success}\")\n        \n    except Exception as e:\n        print(f\"‚ùå Error: {e}\")\n        \n        # Log the error through observability system\n        if hasattr(manager, 'observability_manager') and manager.observability_manager:\n            manager.observability_manager.log_event(\"ERROR\", f\"Demo failed: {str(e)}\", exception=e)\n        \n        raise\n    \n    finally:\n        # Clean up with observability tracking\n        print(\"\\nüßπ Cleaning up with observability tracking...\")\n        \n        # Get final metrics before closing\n        if hasattr(manager, 'observability_manager') and manager.observability_manager:\n            final_logs = manager.observability_manager.get_recent_logs(5)\n            print(f\"   Final log count: {len(final_logs)}\")\n            \n            final_traces = manager.observability_manager.get_traces(3)\n            print(f\"   Final trace count: {len(final_traces)}\")\n        \n        manager.close()\n        print(\"‚úÖ Observable vector database closed successfully\")\n\n\nif __name__ == \"__main__\":\n    main()